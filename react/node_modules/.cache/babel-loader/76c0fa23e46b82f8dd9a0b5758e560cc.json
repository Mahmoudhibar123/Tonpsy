{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar config_1 = __importDefault(require(\"../../config\"));\n\nvar is_function_1 = __importDefault(require(\"../../is-function\"));\n\nvar notAllowed = ['self', \"'self'\"].concat(config_1.default.unsafes);\n\nmodule.exports = function pluginTypesCheck(key, value) {\n  if (!Array.isArray(value)) {\n    throw new Error(\"\\\"\" + value + \"\\\" is not a valid value for \" + key + \". Use an array of strings.\");\n  }\n\n  if (value.length === 0) {\n    throw new Error(key + \" must have at least one value. To block everything, set \" + key + \" to [\\\"'none'\\\"].\");\n  }\n\n  value.forEach(function (pluginType) {\n    if (!pluginType) {\n      throw new Error(\"\\\"\" + pluginType + \"\\\" is not a valid plugin type. Only non-empty strings are allowed.\");\n    }\n\n    if (is_function_1.default(pluginType)) {\n      return;\n    }\n\n    pluginType = pluginType.valueOf();\n\n    if (typeof pluginType !== 'string' || pluginType.length === 0) {\n      throw new Error(\"\\\"\" + pluginType + \"\\\" is not a valid plugin type. Only non-empty strings are allowed.\");\n    }\n\n    if (notAllowed.indexOf(pluginType) !== -1) {\n      throw new Error(\"\\\"\" + pluginType + \"\\\" does not make sense in \" + key + \". Remove it.\");\n    }\n\n    if (config_1.default.mustQuote.indexOf(pluginType) !== -1) {\n      throw new Error(\"\\\"\" + pluginType + \"\\\" must be quoted in \" + key + \". Change it to \\\"'\" + pluginType + \"'\\\" in your source list. Force this by enabling loose mode.\");\n    }\n  });\n};","map":{"version":3,"sources":["/home/fizoumizou/Documents/pfe/react/node_modules/helmet-csp/dist/lib/check-options/check-directive/plugin-types.js"],"names":["__importDefault","mod","__esModule","config_1","require","is_function_1","notAllowed","concat","default","unsafes","module","exports","pluginTypesCheck","key","value","Array","isArray","Error","length","forEach","pluginType","valueOf","indexOf","mustQuote"],"mappings":"AAAA;;AACA,IAAIA,eAAe,GAAI,QAAQ,KAAKA,eAAd,IAAkC,UAAUC,GAAV,EAAe;AACnE,SAAQA,GAAG,IAAIA,GAAG,CAACC,UAAZ,GAA0BD,GAA1B,GAAgC;AAAE,eAAWA;AAAb,GAAvC;AACH,CAFD;;AAGA,IAAIE,QAAQ,GAAGH,eAAe,CAACI,OAAO,CAAC,cAAD,CAAR,CAA9B;;AACA,IAAIC,aAAa,GAAGL,eAAe,CAACI,OAAO,CAAC,mBAAD,CAAR,CAAnC;;AACA,IAAIE,UAAU,GAAG,CAAC,MAAD,EAAS,QAAT,EAAmBC,MAAnB,CAA0BJ,QAAQ,CAACK,OAAT,CAAiBC,OAA3C,CAAjB;;AACAC,MAAM,CAACC,OAAP,GAAiB,SAASC,gBAAT,CAA0BC,GAA1B,EAA+BC,KAA/B,EAAsC;AACnD,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcF,KAAd,CAAL,EAA2B;AACvB,UAAM,IAAIG,KAAJ,CAAU,OAAOH,KAAP,GAAe,8BAAf,GAAgDD,GAAhD,GAAsD,4BAAhE,CAAN;AACH;;AACD,MAAIC,KAAK,CAACI,MAAN,KAAiB,CAArB,EAAwB;AACpB,UAAM,IAAID,KAAJ,CAAUJ,GAAG,GAAG,0DAAN,GAAmEA,GAAnE,GAAyE,mBAAnF,CAAN;AACH;;AACDC,EAAAA,KAAK,CAACK,OAAN,CAAc,UAAUC,UAAV,EAAsB;AAChC,QAAI,CAACA,UAAL,EAAiB;AACb,YAAM,IAAIH,KAAJ,CAAU,OAAOG,UAAP,GAAoB,oEAA9B,CAAN;AACH;;AACD,QAAIf,aAAa,CAACG,OAAd,CAAsBY,UAAtB,CAAJ,EAAuC;AACnC;AACH;;AACDA,IAAAA,UAAU,GAAGA,UAAU,CAACC,OAAX,EAAb;;AACA,QAAI,OAAOD,UAAP,KAAsB,QAAtB,IAAkCA,UAAU,CAACF,MAAX,KAAsB,CAA5D,EAA+D;AAC3D,YAAM,IAAID,KAAJ,CAAU,OAAOG,UAAP,GAAoB,oEAA9B,CAAN;AACH;;AACD,QAAId,UAAU,CAACgB,OAAX,CAAmBF,UAAnB,MAAmC,CAAC,CAAxC,EAA2C;AACvC,YAAM,IAAIH,KAAJ,CAAU,OAAOG,UAAP,GAAoB,4BAApB,GAAmDP,GAAnD,GAAyD,cAAnE,CAAN;AACH;;AACD,QAAIV,QAAQ,CAACK,OAAT,CAAiBe,SAAjB,CAA2BD,OAA3B,CAAmCF,UAAnC,MAAmD,CAAC,CAAxD,EAA2D;AACvD,YAAM,IAAIH,KAAJ,CAAU,OAAOG,UAAP,GAAoB,uBAApB,GAA8CP,GAA9C,GAAoD,oBAApD,GAA2EO,UAA3E,GAAwF,6DAAlG,CAAN;AACH;AACJ,GAjBD;AAkBH,CAzBD","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar config_1 = __importDefault(require(\"../../config\"));\nvar is_function_1 = __importDefault(require(\"../../is-function\"));\nvar notAllowed = ['self', \"'self'\"].concat(config_1.default.unsafes);\nmodule.exports = function pluginTypesCheck(key, value) {\n    if (!Array.isArray(value)) {\n        throw new Error(\"\\\"\" + value + \"\\\" is not a valid value for \" + key + \". Use an array of strings.\");\n    }\n    if (value.length === 0) {\n        throw new Error(key + \" must have at least one value. To block everything, set \" + key + \" to [\\\"'none'\\\"].\");\n    }\n    value.forEach(function (pluginType) {\n        if (!pluginType) {\n            throw new Error(\"\\\"\" + pluginType + \"\\\" is not a valid plugin type. Only non-empty strings are allowed.\");\n        }\n        if (is_function_1.default(pluginType)) {\n            return;\n        }\n        pluginType = pluginType.valueOf();\n        if (typeof pluginType !== 'string' || pluginType.length === 0) {\n            throw new Error(\"\\\"\" + pluginType + \"\\\" is not a valid plugin type. Only non-empty strings are allowed.\");\n        }\n        if (notAllowed.indexOf(pluginType) !== -1) {\n            throw new Error(\"\\\"\" + pluginType + \"\\\" does not make sense in \" + key + \". Remove it.\");\n        }\n        if (config_1.default.mustQuote.indexOf(pluginType) !== -1) {\n            throw new Error(\"\\\"\" + pluginType + \"\\\" must be quoted in \" + key + \". Change it to \\\"'\" + pluginType + \"'\\\" in your source list. Force this by enabling loose mode.\");\n        }\n    });\n};\n"]},"metadata":{},"sourceType":"script"}
{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar config_1 = __importDefault(require(\"../../config\"));\n\nvar boolean_1 = __importDefault(require(\"./boolean\"));\n\nvar plugin_types_1 = __importDefault(require(\"./plugin-types\"));\n\nvar report_uri_1 = __importDefault(require(\"./report-uri\"));\n\nvar require_sri_for_1 = __importDefault(require(\"./require-sri-for\"));\n\nvar sandbox_1 = __importDefault(require(\"./sandbox\"));\n\nvar source_list_1 = __importDefault(require(\"./source-list\"));\n\nvar checkers = {\n  boolean: boolean_1.default,\n  pluginTypes: plugin_types_1.default,\n  reportUri: report_uri_1.default,\n  requireSriFor: require_sri_for_1.default,\n  sandbox: sandbox_1.default,\n  sourceList: source_list_1.default\n};\n\nmodule.exports = function checkDirective(key, value, options) {\n  if (options.loose) {\n    return;\n  }\n\n  if (!Object.prototype.hasOwnProperty.call(config_1.default.directives, key)) {\n    throw new Error(\"\\\"\" + key + \"\\\" is an invalid directive. See the documentation for the supported list. Force this by enabling loose mode.\");\n  } // This cast is safe thanks to the above check.\n\n\n  var directiveType = config_1.default.directives[key].type;\n  checkers[directiveType](key, value);\n};","map":{"version":3,"sources":["/home/fizoumizou/Documents/pfe/react/node_modules/helmet-csp/dist/lib/check-options/check-directive/index.js"],"names":["__importDefault","mod","__esModule","config_1","require","boolean_1","plugin_types_1","report_uri_1","require_sri_for_1","sandbox_1","source_list_1","checkers","boolean","default","pluginTypes","reportUri","requireSriFor","sandbox","sourceList","module","exports","checkDirective","key","value","options","loose","Object","prototype","hasOwnProperty","call","directives","Error","directiveType","type"],"mappings":"AAAA;;AACA,IAAIA,eAAe,GAAI,QAAQ,KAAKA,eAAd,IAAkC,UAAUC,GAAV,EAAe;AACnE,SAAQA,GAAG,IAAIA,GAAG,CAACC,UAAZ,GAA0BD,GAA1B,GAAgC;AAAE,eAAWA;AAAb,GAAvC;AACH,CAFD;;AAGA,IAAIE,QAAQ,GAAGH,eAAe,CAACI,OAAO,CAAC,cAAD,CAAR,CAA9B;;AACA,IAAIC,SAAS,GAAGL,eAAe,CAACI,OAAO,CAAC,WAAD,CAAR,CAA/B;;AACA,IAAIE,cAAc,GAAGN,eAAe,CAACI,OAAO,CAAC,gBAAD,CAAR,CAApC;;AACA,IAAIG,YAAY,GAAGP,eAAe,CAACI,OAAO,CAAC,cAAD,CAAR,CAAlC;;AACA,IAAII,iBAAiB,GAAGR,eAAe,CAACI,OAAO,CAAC,mBAAD,CAAR,CAAvC;;AACA,IAAIK,SAAS,GAAGT,eAAe,CAACI,OAAO,CAAC,WAAD,CAAR,CAA/B;;AACA,IAAIM,aAAa,GAAGV,eAAe,CAACI,OAAO,CAAC,eAAD,CAAR,CAAnC;;AACA,IAAIO,QAAQ,GAAG;AACXC,EAAAA,OAAO,EAAEP,SAAS,CAACQ,OADR;AAEXC,EAAAA,WAAW,EAAER,cAAc,CAACO,OAFjB;AAGXE,EAAAA,SAAS,EAAER,YAAY,CAACM,OAHb;AAIXG,EAAAA,aAAa,EAAER,iBAAiB,CAACK,OAJtB;AAKXI,EAAAA,OAAO,EAAER,SAAS,CAACI,OALR;AAMXK,EAAAA,UAAU,EAAER,aAAa,CAACG;AANf,CAAf;;AAQAM,MAAM,CAACC,OAAP,GAAiB,SAASC,cAAT,CAAwBC,GAAxB,EAA6BC,KAA7B,EAAoCC,OAApC,EAA6C;AAC1D,MAAIA,OAAO,CAACC,KAAZ,EAAmB;AACf;AACH;;AACD,MAAI,CAACC,MAAM,CAACC,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqC1B,QAAQ,CAACU,OAAT,CAAiBiB,UAAtD,EAAkER,GAAlE,CAAL,EAA6E;AACzE,UAAM,IAAIS,KAAJ,CAAU,OAAOT,GAAP,GAAa,8GAAvB,CAAN;AACH,GANyD,CAO1D;;;AACA,MAAIU,aAAa,GAAG7B,QAAQ,CAACU,OAAT,CAAiBiB,UAAjB,CAA4BR,GAA5B,EAAiCW,IAArD;AACAtB,EAAAA,QAAQ,CAACqB,aAAD,CAAR,CAAwBV,GAAxB,EAA6BC,KAA7B;AACH,CAVD","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar config_1 = __importDefault(require(\"../../config\"));\nvar boolean_1 = __importDefault(require(\"./boolean\"));\nvar plugin_types_1 = __importDefault(require(\"./plugin-types\"));\nvar report_uri_1 = __importDefault(require(\"./report-uri\"));\nvar require_sri_for_1 = __importDefault(require(\"./require-sri-for\"));\nvar sandbox_1 = __importDefault(require(\"./sandbox\"));\nvar source_list_1 = __importDefault(require(\"./source-list\"));\nvar checkers = {\n    boolean: boolean_1.default,\n    pluginTypes: plugin_types_1.default,\n    reportUri: report_uri_1.default,\n    requireSriFor: require_sri_for_1.default,\n    sandbox: sandbox_1.default,\n    sourceList: source_list_1.default,\n};\nmodule.exports = function checkDirective(key, value, options) {\n    if (options.loose) {\n        return;\n    }\n    if (!Object.prototype.hasOwnProperty.call(config_1.default.directives, key)) {\n        throw new Error(\"\\\"\" + key + \"\\\" is an invalid directive. See the documentation for the supported list. Force this by enabling loose mode.\");\n    }\n    // This cast is safe thanks to the above check.\n    var directiveType = config_1.default.directives[key].type;\n    checkers[directiveType](key, value);\n};\n"]},"metadata":{},"sourceType":"script"}
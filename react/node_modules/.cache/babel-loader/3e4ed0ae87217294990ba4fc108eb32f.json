{"ast":null,"code":"\"use strict\";\n\nfunction transformDirectivesForPreCsp1Firefox(directives, basePolicy) {\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  var result = Object.assign({}, basePolicy); // Copy `connectSrc` to `xhrSrc`\n\n  var connectSrc = directives.connectSrc;\n\n  if (connectSrc) {\n    result.xhrSrc = connectSrc;\n  } // Copy everything else\n\n\n  Object.keys(directives).forEach(function (key) {\n    if (key !== 'connectSrc') {\n      result[key] = directives[key];\n    }\n  }); // Rename `scriptSrc` values `unsafe-inline` and `unsafe-eval`\n\n  var scriptSrc = directives.scriptSrc;\n\n  if (scriptSrc) {\n    var optionsValues = [];\n\n    if (scriptSrc.indexOf(\"'unsafe-inline'\") !== -1) {\n      optionsValues.push('inline-script');\n    }\n\n    if (scriptSrc.indexOf(\"'unsafe-eval'\") !== -1) {\n      optionsValues.push('eval-script');\n    }\n\n    if (optionsValues.length !== 0) {\n      result.options = optionsValues;\n    }\n  }\n\n  return result;\n}\n\nmodule.exports = function transformDirectivesForBrowser(browser, directives) {\n  // For now, Firefox is the only browser that needs to be transformed.\n  if (!browser || browser.getBrowserName() !== 'Firefox') {\n    return directives;\n  }\n\n  var osName = browser.getOSName();\n\n  if (osName === 'iOS') {\n    return directives;\n  }\n\n  var browserVersion = parseFloat(browser.getBrowserVersion());\n\n  if (osName === 'Android' && browserVersion < 25 || browser.getPlatformType(true) === 'mobile' && browserVersion < 32) {\n    return transformDirectivesForPreCsp1Firefox(directives, {\n      defaultSrc: ['*']\n    });\n  } else if (browserVersion >= 4 && browserVersion < 23) {\n    var basePolicy = {};\n\n    if (browserVersion < 5) {\n      basePolicy.allow = ['*'];\n\n      if (directives.defaultSrc) {\n        basePolicy.allow = directives.defaultSrc;\n        directives = Object.assign({}, directives);\n        delete directives.defaultSrc;\n      }\n    } else {\n      basePolicy.defaultSrc = ['*'];\n    }\n\n    return transformDirectivesForPreCsp1Firefox(directives, basePolicy);\n  } else {\n    return directives;\n  }\n};","map":{"version":3,"sources":["/home/fizoumizou/Documents/pfe/react/node_modules/helmet-csp/dist/lib/transform-directives-for-browser.js"],"names":["transformDirectivesForPreCsp1Firefox","directives","basePolicy","result","Object","assign","connectSrc","xhrSrc","keys","forEach","key","scriptSrc","optionsValues","indexOf","push","length","options","module","exports","transformDirectivesForBrowser","browser","getBrowserName","osName","getOSName","browserVersion","parseFloat","getBrowserVersion","getPlatformType","defaultSrc","allow"],"mappings":"AAAA;;AACA,SAASA,oCAAT,CAA8CC,UAA9C,EAA0DC,UAA1D,EAAsE;AAClE;AACA,MAAIC,MAAM,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBH,UAAlB,CAAb,CAFkE,CAGlE;;AACA,MAAII,UAAU,GAAGL,UAAU,CAACK,UAA5B;;AACA,MAAIA,UAAJ,EAAgB;AACZH,IAAAA,MAAM,CAACI,MAAP,GAAgBD,UAAhB;AACH,GAPiE,CAQlE;;;AACAF,EAAAA,MAAM,CAACI,IAAP,CAAYP,UAAZ,EAAwBQ,OAAxB,CAAgC,UAAUC,GAAV,EAAe;AAC3C,QAAIA,GAAG,KAAK,YAAZ,EAA0B;AACtBP,MAAAA,MAAM,CAACO,GAAD,CAAN,GAAcT,UAAU,CAACS,GAAD,CAAxB;AACH;AACJ,GAJD,EATkE,CAclE;;AACA,MAAIC,SAAS,GAAGV,UAAU,CAACU,SAA3B;;AACA,MAAIA,SAAJ,EAAe;AACX,QAAIC,aAAa,GAAG,EAApB;;AACA,QAAID,SAAS,CAACE,OAAV,CAAkB,iBAAlB,MAAyC,CAAC,CAA9C,EAAiD;AAC7CD,MAAAA,aAAa,CAACE,IAAd,CAAmB,eAAnB;AACH;;AACD,QAAIH,SAAS,CAACE,OAAV,CAAkB,eAAlB,MAAuC,CAAC,CAA5C,EAA+C;AAC3CD,MAAAA,aAAa,CAACE,IAAd,CAAmB,aAAnB;AACH;;AACD,QAAIF,aAAa,CAACG,MAAd,KAAyB,CAA7B,EAAgC;AAC5BZ,MAAAA,MAAM,CAACa,OAAP,GAAiBJ,aAAjB;AACH;AACJ;;AACD,SAAOT,MAAP;AACH;;AACDc,MAAM,CAACC,OAAP,GAAiB,SAASC,6BAAT,CAAuCC,OAAvC,EAAgDnB,UAAhD,EAA4D;AACzE;AACA,MAAI,CAACmB,OAAD,IAAYA,OAAO,CAACC,cAAR,OAA6B,SAA7C,EAAwD;AACpD,WAAOpB,UAAP;AACH;;AACD,MAAIqB,MAAM,GAAGF,OAAO,CAACG,SAAR,EAAb;;AACA,MAAID,MAAM,KAAK,KAAf,EAAsB;AAClB,WAAOrB,UAAP;AACH;;AACD,MAAIuB,cAAc,GAAGC,UAAU,CAACL,OAAO,CAACM,iBAAR,EAAD,CAA/B;;AACA,MAAIJ,MAAM,KAAK,SAAX,IAAwBE,cAAc,GAAG,EAAzC,IACAJ,OAAO,CAACO,eAAR,CAAwB,IAAxB,MAAkC,QAAlC,IAA8CH,cAAc,GAAG,EADnE,EACuE;AACnE,WAAOxB,oCAAoC,CAACC,UAAD,EAAa;AAAE2B,MAAAA,UAAU,EAAE,CAAC,GAAD;AAAd,KAAb,CAA3C;AACH,GAHD,MAIK,IAAIJ,cAAc,IAAI,CAAlB,IAAuBA,cAAc,GAAG,EAA5C,EAAgD;AACjD,QAAItB,UAAU,GAAG,EAAjB;;AACA,QAAIsB,cAAc,GAAG,CAArB,EAAwB;AACpBtB,MAAAA,UAAU,CAAC2B,KAAX,GAAmB,CAAC,GAAD,CAAnB;;AACA,UAAI5B,UAAU,CAAC2B,UAAf,EAA2B;AACvB1B,QAAAA,UAAU,CAAC2B,KAAX,GAAmB5B,UAAU,CAAC2B,UAA9B;AACA3B,QAAAA,UAAU,GAAGG,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkBJ,UAAlB,CAAb;AACA,eAAOA,UAAU,CAAC2B,UAAlB;AACH;AACJ,KAPD,MAQK;AACD1B,MAAAA,UAAU,CAAC0B,UAAX,GAAwB,CAAC,GAAD,CAAxB;AACH;;AACD,WAAO5B,oCAAoC,CAACC,UAAD,EAAaC,UAAb,CAA3C;AACH,GAdI,MAeA;AACD,WAAOD,UAAP;AACH;AACJ,CAhCD","sourcesContent":["\"use strict\";\nfunction transformDirectivesForPreCsp1Firefox(directives, basePolicy) {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    var result = Object.assign({}, basePolicy);\n    // Copy `connectSrc` to `xhrSrc`\n    var connectSrc = directives.connectSrc;\n    if (connectSrc) {\n        result.xhrSrc = connectSrc;\n    }\n    // Copy everything else\n    Object.keys(directives).forEach(function (key) {\n        if (key !== 'connectSrc') {\n            result[key] = directives[key];\n        }\n    });\n    // Rename `scriptSrc` values `unsafe-inline` and `unsafe-eval`\n    var scriptSrc = directives.scriptSrc;\n    if (scriptSrc) {\n        var optionsValues = [];\n        if (scriptSrc.indexOf(\"'unsafe-inline'\") !== -1) {\n            optionsValues.push('inline-script');\n        }\n        if (scriptSrc.indexOf(\"'unsafe-eval'\") !== -1) {\n            optionsValues.push('eval-script');\n        }\n        if (optionsValues.length !== 0) {\n            result.options = optionsValues;\n        }\n    }\n    return result;\n}\nmodule.exports = function transformDirectivesForBrowser(browser, directives) {\n    // For now, Firefox is the only browser that needs to be transformed.\n    if (!browser || browser.getBrowserName() !== 'Firefox') {\n        return directives;\n    }\n    var osName = browser.getOSName();\n    if (osName === 'iOS') {\n        return directives;\n    }\n    var browserVersion = parseFloat(browser.getBrowserVersion());\n    if (osName === 'Android' && browserVersion < 25 ||\n        browser.getPlatformType(true) === 'mobile' && browserVersion < 32) {\n        return transformDirectivesForPreCsp1Firefox(directives, { defaultSrc: ['*'] });\n    }\n    else if (browserVersion >= 4 && browserVersion < 23) {\n        var basePolicy = {};\n        if (browserVersion < 5) {\n            basePolicy.allow = ['*'];\n            if (directives.defaultSrc) {\n                basePolicy.allow = directives.defaultSrc;\n                directives = Object.assign({}, directives);\n                delete directives.defaultSrc;\n            }\n        }\n        else {\n            basePolicy.defaultSrc = ['*'];\n        }\n        return transformDirectivesForPreCsp1Firefox(directives, basePolicy);\n    }\n    else {\n        return directives;\n    }\n};\n"]},"metadata":{},"sourceType":"script"}
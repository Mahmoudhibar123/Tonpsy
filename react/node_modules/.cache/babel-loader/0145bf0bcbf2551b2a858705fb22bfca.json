{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nvar config_1 = __importDefault(require(\"../../config\"));\n\nvar is_function_1 = __importDefault(require(\"../../is-function\"));\n\nmodule.exports = function sourceListCheck(key, value) {\n  if (value === false) {\n    return;\n  }\n\n  if (!Array.isArray(value)) {\n    throw new Error(\"\\\"\" + value + \"\\\" is not a valid value for \" + key + \". Use an array of strings.\");\n  }\n\n  if (value.length === 0) {\n    throw new Error(key + \" must have at least one value. To block everything, set \" + key + \" to [\\\"'none'\\\"].\");\n  }\n\n  value.forEach(function (sourceExpression) {\n    if (!sourceExpression) {\n      throw new Error(\"\\\"\" + sourceExpression + \"\\\" is not a valid source expression. Only non-empty strings are allowed.\");\n    }\n\n    if (is_function_1.default(sourceExpression)) {\n      return;\n    }\n\n    sourceExpression = sourceExpression.valueOf();\n\n    if (typeof sourceExpression !== 'string' || sourceExpression.length === 0) {\n      throw new Error(\"\\\"\" + sourceExpression + \"\\\" is not a valid source expression. Only non-empty strings are allowed.\");\n    }\n\n    var directiveInfo = config_1.default.directives[key];\n\n    if (!directiveInfo.hasUnsafes && config_1.default.unsafes.indexOf(sourceExpression) !== -1 || !directiveInfo.hasStrictDynamic && config_1.default.strictDynamics.indexOf(sourceExpression) !== -1) {\n      throw new Error(\"\\\"\" + sourceExpression + \"\\\" does not make sense in \" + key + \". Remove it.\");\n    }\n\n    if (config_1.default.mustQuote.indexOf(sourceExpression) !== -1) {\n      throw new Error(\"\\\"\" + sourceExpression + \"\\\" must be quoted in \" + key + \". Change it to \\\"'\" + sourceExpression + \"'\\\" in your source list. Force this by enabling loose mode.\");\n    }\n  });\n};","map":{"version":3,"sources":["/home/fizoumizou/Documents/pfe/react/node_modules/helmet-csp/dist/lib/check-options/check-directive/source-list.js"],"names":["__importDefault","mod","__esModule","config_1","require","is_function_1","module","exports","sourceListCheck","key","value","Array","isArray","Error","length","forEach","sourceExpression","default","valueOf","directiveInfo","directives","hasUnsafes","unsafes","indexOf","hasStrictDynamic","strictDynamics","mustQuote"],"mappings":"AAAA;;AACA,IAAIA,eAAe,GAAI,QAAQ,KAAKA,eAAd,IAAkC,UAAUC,GAAV,EAAe;AACnE,SAAQA,GAAG,IAAIA,GAAG,CAACC,UAAZ,GAA0BD,GAA1B,GAAgC;AAAE,eAAWA;AAAb,GAAvC;AACH,CAFD;;AAGA,IAAIE,QAAQ,GAAGH,eAAe,CAACI,OAAO,CAAC,cAAD,CAAR,CAA9B;;AACA,IAAIC,aAAa,GAAGL,eAAe,CAACI,OAAO,CAAC,mBAAD,CAAR,CAAnC;;AACAE,MAAM,CAACC,OAAP,GAAiB,SAASC,eAAT,CAAyBC,GAAzB,EAA8BC,KAA9B,EAAqC;AAClD,MAAIA,KAAK,KAAK,KAAd,EAAqB;AACjB;AACH;;AACD,MAAI,CAACC,KAAK,CAACC,OAAN,CAAcF,KAAd,CAAL,EAA2B;AACvB,UAAM,IAAIG,KAAJ,CAAU,OAAOH,KAAP,GAAe,8BAAf,GAAgDD,GAAhD,GAAsD,4BAAhE,CAAN;AACH;;AACD,MAAIC,KAAK,CAACI,MAAN,KAAiB,CAArB,EAAwB;AACpB,UAAM,IAAID,KAAJ,CAAUJ,GAAG,GAAG,0DAAN,GAAmEA,GAAnE,GAAyE,mBAAnF,CAAN;AACH;;AACDC,EAAAA,KAAK,CAACK,OAAN,CAAc,UAAUC,gBAAV,EAA4B;AACtC,QAAI,CAACA,gBAAL,EAAuB;AACnB,YAAM,IAAIH,KAAJ,CAAU,OAAOG,gBAAP,GAA0B,0EAApC,CAAN;AACH;;AACD,QAAIX,aAAa,CAACY,OAAd,CAAsBD,gBAAtB,CAAJ,EAA6C;AACzC;AACH;;AACDA,IAAAA,gBAAgB,GAAGA,gBAAgB,CAACE,OAAjB,EAAnB;;AACA,QAAI,OAAOF,gBAAP,KAA4B,QAA5B,IAAwCA,gBAAgB,CAACF,MAAjB,KAA4B,CAAxE,EAA2E;AACvE,YAAM,IAAID,KAAJ,CAAU,OAAOG,gBAAP,GAA0B,0EAApC,CAAN;AACH;;AACD,QAAIG,aAAa,GAAGhB,QAAQ,CAACc,OAAT,CAAiBG,UAAjB,CAA4BX,GAA5B,CAApB;;AACA,QAAI,CAACU,aAAa,CAACE,UAAf,IAA6BlB,QAAQ,CAACc,OAAT,CAAiBK,OAAjB,CAAyBC,OAAzB,CAAiCP,gBAAjC,MAAuD,CAAC,CAArF,IACA,CAACG,aAAa,CAACK,gBAAf,IAAmCrB,QAAQ,CAACc,OAAT,CAAiBQ,cAAjB,CAAgCF,OAAhC,CAAwCP,gBAAxC,MAA8D,CAAC,CADtG,EACyG;AACrG,YAAM,IAAIH,KAAJ,CAAU,OAAOG,gBAAP,GAA0B,4BAA1B,GAAyDP,GAAzD,GAA+D,cAAzE,CAAN;AACH;;AACD,QAAIN,QAAQ,CAACc,OAAT,CAAiBS,SAAjB,CAA2BH,OAA3B,CAAmCP,gBAAnC,MAAyD,CAAC,CAA9D,EAAiE;AAC7D,YAAM,IAAIH,KAAJ,CAAU,OAAOG,gBAAP,GAA0B,uBAA1B,GAAoDP,GAApD,GAA0D,oBAA1D,GAAiFO,gBAAjF,GAAoG,6DAA9G,CAAN;AACH;AACJ,GAnBD;AAoBH,CA9BD","sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar config_1 = __importDefault(require(\"../../config\"));\nvar is_function_1 = __importDefault(require(\"../../is-function\"));\nmodule.exports = function sourceListCheck(key, value) {\n    if (value === false) {\n        return;\n    }\n    if (!Array.isArray(value)) {\n        throw new Error(\"\\\"\" + value + \"\\\" is not a valid value for \" + key + \". Use an array of strings.\");\n    }\n    if (value.length === 0) {\n        throw new Error(key + \" must have at least one value. To block everything, set \" + key + \" to [\\\"'none'\\\"].\");\n    }\n    value.forEach(function (sourceExpression) {\n        if (!sourceExpression) {\n            throw new Error(\"\\\"\" + sourceExpression + \"\\\" is not a valid source expression. Only non-empty strings are allowed.\");\n        }\n        if (is_function_1.default(sourceExpression)) {\n            return;\n        }\n        sourceExpression = sourceExpression.valueOf();\n        if (typeof sourceExpression !== 'string' || sourceExpression.length === 0) {\n            throw new Error(\"\\\"\" + sourceExpression + \"\\\" is not a valid source expression. Only non-empty strings are allowed.\");\n        }\n        var directiveInfo = config_1.default.directives[key];\n        if (!directiveInfo.hasUnsafes && config_1.default.unsafes.indexOf(sourceExpression) !== -1 ||\n            !directiveInfo.hasStrictDynamic && config_1.default.strictDynamics.indexOf(sourceExpression) !== -1) {\n            throw new Error(\"\\\"\" + sourceExpression + \"\\\" does not make sense in \" + key + \". Remove it.\");\n        }\n        if (config_1.default.mustQuote.indexOf(sourceExpression) !== -1) {\n            throw new Error(\"\\\"\" + sourceExpression + \"\\\" must be quoted in \" + key + \". Change it to \\\"'\" + sourceExpression + \"'\\\" in your source list. Force this by enabling loose mode.\");\n        }\n    });\n};\n"]},"metadata":{},"sourceType":"script"}